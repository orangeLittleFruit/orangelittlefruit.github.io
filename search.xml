<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unable to handle kernel paging request at virtual address</title>
    <url>/2020/09/07/Unable-to-handle-kernel-paging-request-at-virtual-address/</url>
    <content><![CDATA[<h2 id="产生的三种原因"><a href="#产生的三种原因" class="headerlink" title="产生的三种原因"></a>产生的三种原因</h2><ul>
<li><p><strong>Unable to handle kernel paging request at virtual address 00000000</strong></p>
<p>越出内核地址空间范围，原因是由于使用空NULL指针</p>
</li>
<li><p><strong>Unable to handle kernel paging request at virtual address 20100110</strong></p>
<p>越出内核地址空间范围，原因是的内存越界导致该指针</p>
<p>所在内存被破坏了。 接下来的困难是在什么地方这个内存被修改？为什么被修改？</p>
</li>
<li><p><strong>Unable to handle kernel paging request at virtual address c074838c</strong></p>
<p>没有越出内核地址空间范围，为什么也oops？<br>这种情况称之为：试图篡改受限制内存。比如：声明为const的变量！</p>
</li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[   49.736372] Unable to handle kernel paging request at virtual address 6b6b6b5f</span><br><span class="line">[   49.744537] pgd &#x3D; c0d20000</span><br><span class="line">[   49.747576] [6b6b6b5f] *pgd&#x3D;00000000</span><br><span class="line">[   49.751791] Internal error: Oops - BUG: 5 [#1] PREEMPT SMP THUMB2</span><br><span class="line">[   49.758633] Modules linked in: da380 vin_v4l2 tp9950 imx335_mipi vin_io videobuf2_v4l2 videobuf2_dma_contig videobuf2_memops videobuf2_core</span><br><span class="line">[   49.772770] CPU: 0 PID: 1206 Comm: poweroff Not tainted 4.9.118 #326</span><br><span class="line">[   49.779902] Hardware name: sun8iw16</span><br><span class="line">[   49.783819] task: c3c7aa40 task.stack: c0cb6000</span><br><span class="line">[   49.789064] PC is at __vin_pipeline_close+0x1b&#x2F;0x68 [vin_v4l2]</span><br><span class="line">[   49.795707] LR is at __vin_pipeline_s_stream+0x226&#x2F;0x25c [vin_v4l2]</span><br><span class="line">[   49.802749] pc : [&lt;bf8388f4&gt;]    lr : [&lt;bf837f83&gt;]    psr: 20000033</span><br><span class="line">[   49.802749] sp : c0cb7e38  ip : c0cb603c  fp : ffffffb8</span><br><span class="line">[   49.815641] r10: c3cb6304  r9 : c0332609  r8 : c042b820</span><br><span class="line">[   49.821510] r7 : c3ca3bd0  r6 : c044a944  r5 : 00000000  r4 : 6b6b5d0b</span><br><span class="line">[   49.828839] r3 : 6b6b6b66  r2 : 00002000  r1 : 00000000  r0 : 00000000</span><br><span class="line">[   49.836172] Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA Thumb  Segment none</span><br><span class="line">[   49.844382] Control: 50c5387d  Table: 40d2006a  DAC: 00000051</span><br></pre></td></tr></table></figure>

<h4 id="1-确定发生oops属于内核模块还是驱动模块"><a href="#1-确定发生oops属于内核模块还是驱动模块" class="headerlink" title="1.确定发生oops属于内核模块还是驱动模块?"></a>1.确定发生oops属于内核模块还是驱动模块?</h4><p>​    根据以下oops信息，我们可以得到：</p>
<p>此oops发生在cpu0上，发生时pc的值为bf8388f4，根据pc的值来确定时内核模块还是驱动模块。</p>
<p>查看<strong>System.map</strong>确定内核的函数的地址范围:0000002c~c0450ad4，而本PC值为bf8388f4，并不属于内核模块，而是属于加载模块。</p>
<h4 id="2-根据pc确定错误出在哪一个加载的内核模块"><a href="#2-根据pc确定错误出在哪一个加载的内核模块" class="headerlink" title="2.根据pc确定错误出在哪一个加载的内核模块"></a>2.根据pc确定错误出在哪一个加载的内核模块</h4><ul>
<li><p>cat /proc/kallsyms (内核函数、加载的函数的地址)  &gt; /data/kallsyms.txt</p>
</li>
<li><p>从这些信息中找出一个跟bf8388f4相近的地址</p>
</li>
</ul>
<p>我们找到如下信息：</p>
<p>bf8388d8 t $t    [vin_v4l2]，可以确定为vin_v4l2.ko模块</p>
<p>PC is at __vin_pipeline_close+0x1b/0x68 [vin_v4l2]可以确定是在 __vin_pipeline_close+0x1b/0x68中便宜0x1b个字节的地方，该函数的总大小为0x68个字节。</p>
<h4 id="3-根据oops信息崩溃在内核模块还是驱动模块，分别对vimlinx和-ko文件进行反汇编"><a href="#3-根据oops信息崩溃在内核模块还是驱动模块，分别对vimlinx和-ko文件进行反汇编" class="headerlink" title="3.根据oops信息崩溃在内核模块还是驱动模块，分别对vimlinx和.ko文件进行反汇编"></a>3.根据oops信息崩溃在内核模块还是驱动模块，分别对vimlinx和.ko文件进行反汇编</h4><ul>
<li><p>对内核模块反汇编</p>
<p><code> arm-linux-gnueabihf-objdump -D vmlinux &gt; ./vmlinux.dis</code></p>
</li>
<li><p>对驱动ko文件反汇编</p>
<p><code>arm-linux-gnueabihf-objdump -D -S drivers/media/platform/sunxi-vin/vin_v4l2.ko ./vin_v4l2.dis</code></p>
</li>
</ul>
<h4 id="4-根据oops信息，确定发生错误的代码位置"><a href="#4-根据oops信息，确定发生错误的代码位置" class="headerlink" title="4.根据oops信息，确定发生错误的代码位置"></a>4.根据oops信息，确定发生错误的代码位置</h4><p>​    打开生成的dis文件，根据oops信息中pc指针的值以及发生的偏移量，同时根据r0~r10，sp, ip, fp寄存器的值，加以辅助，确定发生错误的汇编指令，且找到对应C语言发生错误的位置。</p>
]]></content>
      <categories>
        <category>Linux oops Debug技巧</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>usb gadget configfs 翻译</title>
    <url>/2020/09/06/usb-gadget-configfs-%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<p>本文翻译<a href="https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt">Documentation/usb/gadget_configfs.txt</a>文档。主要是讲述如何通过<code>configfs</code>来<strong>配置</strong>USB Gadget的<code>functions</code>。<span style = "color:red">注意：这里使用的是<strong>配置</strong>，也就是要求内核必须存在对应的<code>functions</code>。与<code>ffs</code>的差别是，<code>ffs</code>可以<strong>创建</strong>一个新的<code>functions</code>，内核并不要求事先存在。</span></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Linux USB Gadget是一个拥有UDC(USB Device Controller)的设备，该设备可以用于连接到USB Host用于扩展额外的功能，比如串口或者大容量存储（MTP）。Android就是一个支持MTP的USB Gadget。当Android手机插入到电脑中（USB Host），电脑可以识别出一个多媒体设备出来。</p>
<p>USB Host可以通过一些<code>configurations</code>来识别gadget，<code>configuration</code>包括多个<code>interfaces</code>（这里可以理解为USB描述符直接的层级关系）。从gadget的角度来看是<code>functions</code>，每个<code>fcunction</code>代表一种功能，比如串口或者SCSI磁盘。<br>Linux为gadget提供一系列的<code>functions</code>，在<code>drivers/usb/gadget/function/</code>目录中定义。</p>
<p>创建gadget意味着决定将使用哪些<code>configurations</code>，以及每种<code>configurations</code>将提供的<code>functions</code>，<strong>在这之前是以hardcode的方式在代码中设定的</strong>，比如<code>drivers/usb/gadget/legacy/</code>的gadget都是。</p>
<p><code>configfs</code>（请参阅<code>Documentation/filesystems/configfs/*</code>）非常适合告诉内核有关上述决定的内容。为啥是<code>configfs</code>呢？因为<code>configfs</code>支持从用户空间配置内核空间的驱动。反之，<code>sysfs</code>支持同内核空间export一些对象供用户空间查看。本文档是讲关于如何做到的，以及描述了如何设计将<code>configfs</code>与usb gadget集成在一起。</p>
<hr>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>必须在内核中使能<code>CONFIGFS_FS</code>，当然<code>USB_LIBCOMPOSITE</code>也必须使能。与之对应的代码在<code>fs/configfs</code>和<code>drivers/usb/gadget/</code>。</p>
<hr>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>（可以在这里看到通过configfs提供第一个功能的原始帖子：<a href="http://www.spinics.net/lists/linux-usb/msg76388.html%EF%BC%89">http://www.spinics.net/lists/linux-usb/msg76388.html）</a></p>
<h3 id="inmod驱动"><a href="#inmod驱动" class="headerlink" title="inmod驱动"></a>inmod驱动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ insmod libcomposite.ko</span><br><span class="line">$ insmode configfs.ko</span><br><span class="line">$ mount none $CONFIGFS_HOME -t configfs</span><br></pre></td></tr></table></figure>

<p>这里的<code>CONFIGS_HOME</code>是<code>configfs</code>的挂载点，通常为<code>mount -t configfs none /config</code>。</p>
<h3 id="创建gadget"><a href="#创建gadget" class="headerlink" title="创建gadget"></a>创建<code>gadget</code></h3><p>1、对于要创建的每个gadget，必须创建其相应的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir $CONFIGFS_HOME&#x2F;usb_gadget&#x2F;&lt;gadget name&gt;</span><br><span class="line">$ cd $CONFIGFS_HOME&#x2F;usb_gadget&#x2F;g1</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p>比如说：<code>mkdir $CONFIGFS_HOME/usb_gadget/g1</code>，你如果有多个gadget，就可以创建<code>g2</code>、<code>g3</code>等。<br>2、配置PID和VID<br>每个gadget都要指定PID和VID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ echo &lt;VID&gt; &gt; idVendor</span><br><span class="line">$ echo &lt;PID&gt; &gt; idProduct</span><br></pre></td></tr></table></figure>



<p>3、创建并配置string字目录<br>gadget还需要其<code>serial number</code>，<code>manufacturer</code>和<code>product</code>。 为了有一个存储它们的地方，必须为每种语言创建一个<code>strings</code>子目录，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir strings&#x2F;0x409</span><br><span class="line">$ echo &lt;serial number&gt; &gt; strings&#x2F;0x409&#x2F;serialnumber</span><br><span class="line">$ echo &lt;manufacturer&gt; &gt; strings&#x2F;0x409&#x2F;manufacturer</span><br><span class="line">$ echo &lt;product&gt; &gt; strings&#x2F;0x409&#x2F;product</span><br></pre></td></tr></table></figure>



<h3 id="创建configurations"><a href="#创建configurations" class="headerlink" title="创建configurations"></a>创建<code>configurations</code></h3><p>每个gadget都包含许多配置，必须创建相应的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir configs&#x2F;&lt;name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure>



<p><code>&lt;name&gt;</code>必须是在文件系统中有效的字符串，<code>&lt;number&gt;</code>表示配置号，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir configs&#x2F;c.1</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p>每个配置也需要其字符串，因此必须为每种语言创建子目录，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir configs&#x2F;c.1&#x2F;strings&#x2F;0x409</span><br></pre></td></tr></table></figure>



<p>然后就可以指定配置字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ echo &lt;configuration&gt; &gt; configs&#x2F;c.1&#x2F;strings&#x2F;0x409&#x2F;configuration</span><br></pre></td></tr></table></figure>



<h3 id="创建functions"><a href="#创建functions" class="headerlink" title="创建functions"></a>创建<code>functions</code></h3><p>gadget将提供一些functions，每个functions必须创建相应的目录，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir functions&#x2F;&lt;name&gt;.&lt;instance name&gt;</span><br></pre></td></tr></table></figure>



<p>其中<code>&lt;name&gt;</code>对应于一个允许的functions名称，而实例名称是文件系统中允许的任意字符串，例如（前提条件是必须加载<code>usb_f_ncm.ko</code>驱动）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ mkdir functions&#x2F;ncm.usb0</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p>每个functions都提供其特定的属性集，具有只读或读写访问权限。 在适用的情况下，需要酌情编写。有关更多信息，请参阅[Documentation/ABI/configfs-usb-gadget`](<a href="https://elixir.bootlin.com/linux/latest/source/Documentation/ABI/testing/configfs-usb-gadget">https://elixir.bootlin.com/linux/latest/source/Documentation/ABI/testing/configfs-usb-gadget</a>)</p>
<h3 id="将functions和configuration关联起来"><a href="#将functions和configuration关联起来" class="headerlink" title="将functions和configuration关联起来"></a>将<code>functions</code>和<code>configuration</code>关联起来</h3><p>此时会创建许多gadget，每个gadget都指定了许多配置，并提供了许多功能。 剩下的是指定哪种配置可用的功能（在多种配置中可以使用相同的功能）。这是通过创建符号链接来实现的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ ln -s functions&#x2F;&lt;name&gt;.&lt;instance name&gt; configs&#x2F;&lt;name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure>



<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ ln -s functions&#x2F;ncm.usb0 configs&#x2F;c.1</span><br></pre></td></tr></table></figure>



<h3 id="使能gadget"><a href="#使能gadget" class="headerlink" title="使能gadget"></a>使能gadget</h3><p>所有上述步骤都用于组成<code>configuration</code>和<code>functions</code>的<code>gadget</code>，示例目录结构可能如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy.</span><br><span class="line">.&#x2F;strings</span><br><span class="line">.&#x2F;strings&#x2F;0x409</span><br><span class="line">.&#x2F;strings&#x2F;0x409&#x2F;serialnumber</span><br><span class="line">.&#x2F;strings&#x2F;0x409&#x2F;product</span><br><span class="line">.&#x2F;strings&#x2F;0x409&#x2F;manufacturer</span><br><span class="line">.&#x2F;configs</span><br><span class="line">.&#x2F;configs&#x2F;c.1</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;ncm.usb0 -&gt; ..&#x2F;..&#x2F;..&#x2F;..&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;ncm.usb0</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;strings</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;strings&#x2F;0x409</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;strings&#x2F;0x409&#x2F;configuration</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;bmAttributes</span><br><span class="line">.&#x2F;configs&#x2F;c.1&#x2F;MaxPower</span><br><span class="line">.&#x2F;functions</span><br><span class="line">.&#x2F;functions&#x2F;ncm.usb0</span><br><span class="line">.&#x2F;functions&#x2F;ncm.usb0&#x2F;ifname</span><br><span class="line">.&#x2F;functions&#x2F;ncm.usb0&#x2F;qmult</span><br><span class="line">.&#x2F;functions&#x2F;ncm.usb0&#x2F;host_addr</span><br><span class="line">.&#x2F;functions&#x2F;ncm.usb0&#x2F;dev_addr</span><br><span class="line">.&#x2F;UDC</span><br><span class="line">.&#x2F;bcdUSB</span><br><span class="line">.&#x2F;bcdDevice</span><br><span class="line">.&#x2F;idProduct</span><br><span class="line">.&#x2F;idVendor</span><br><span class="line">.&#x2F;bMaxPacketSize0</span><br><span class="line">.&#x2F;bDeviceProtocol</span><br><span class="line">.&#x2F;bDeviceSubClass</span><br><span class="line">.&#x2F;bDeviceClass</span><br></pre></td></tr></table></figure>



<p>必须最终启用这个gadget，以便USB主机可以枚举它，为了启用gadget，必须将其绑定到<code>UDC</code>（USB Device Controller）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ echo &lt;udc name&gt; &gt; UDC</span><br></pre></td></tr></table></figure>



<p><code>&lt;udc name&gt;</code>可以从<code>/sys/class/udc/*</code>中找到。</p>
<h3 id="关闭gadget"><a href="#关闭gadget" class="headerlink" title="关闭gadget"></a>关闭gadget</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ echo &quot;&quot; &gt; UDC</span><br></pre></td></tr></table></figure>

<h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><ul>
<li><p>从<code>configurations</code>中将<code>functions</code>删掉，比如将<code>&lt;config name&gt;.&lt;number&gt;</code>的configure与<code>&lt;function&gt;</code>之间的软连接删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ rm configs&#x2F;&lt;config name&gt;.&lt;number&gt;&#x2F;&lt;function&gt;</span><br><span class="line">$ rm configs&#x2F;c.1&#x2F;ncm.usb0</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>configurations</code>的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ rmdir configs&#x2F;&lt;config name&gt;.&lt;number&gt;&#x2F;strings&#x2F;&lt;lang&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>configurations</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ rmdir configs&#x2F;&lt;config name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>functions</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ rmdir functions&#x2F;&lt;name&gt;.&lt;instance name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>gadget</code>的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ rmdir strings&#x2F;&lt;lang&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除<code>gadget</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy$ cd ..</span><br><span class="line">$ rmdir &lt;gadget name&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在configfs中有<code>item(项目)</code>和<code>group(组)</code>，都表示为目录。 项目和组之间的区别在于组可以包含其他组。 在下图中只显示了一个项目。 项目和组都可以具有属性，这些属性表示为文件。 用户可以创建和删除目录，但不能删除文件，这些文件可以是只读或读写，具体取决于它们所代表的内容。</p>
<p>configfs的文件系统部分在<code>config_items/groups</code>和<code>configfs_attributes</code>上操作，这些通用且所有已配置元素的类型相同。但是，它们嵌入在特定于使用的更大结构中。 在下面的图片中有一个<code>cs</code>包含一个<code>config_item</code>和一个包含<code>configfs_attribute</code>的<code>sa</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy.&#x2F;</span><br><span class="line">.&#x2F;cs (directory)</span><br><span class="line">|</span><br><span class="line">+--sa (file)</span><br><span class="line">|</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>



<p>每当用户读/写<code>sa</code>文件时，都会调用一个接受<code>struct config_item</code>和<code>struct configfs_attribute</code>的函数。在所述函数中，使用众所周知的<code>container_of</code>技术检索<code>cs</code>和<code>sa</code>，并调用适当的<code>sa函数（show或store）</code>并传递<code>cs</code>和字符缓冲区。<code>show函数</code>用于显示文件的内容（将数据从<code>cs</code>复制到缓冲区），而<code>store函数</code>用于修改文件的内容（将数据从缓冲区复制到<code>cs</code>），但这取决于实现者 这两个函数决定了他们实际做了什么。</p>
<p>文件名由配置项/组设计器决定，而一般目录可以随意命名。一个组可以自动创建许多默认子组。<br>请参阅：<a href="https://www.kernel.org/doc/Documentation/filesystems/configfs/configfs.txt">Documentation/filesystems/configfs/*</a></p>
<p>上述概念转换为USB gadget，如下所示：</p>
<p>1、gadget有自己的配置组，它具有一些属性（idVendor，idProduct等）和默认子组（配置，函数，字符串）。 写入属性会导致信息存储在适当的位置。在配置，函数和字符串子组中，用户可以创建其子组以表示给定语言中的配置，函数和字符串组。<br>2、用户创建配置和功能，在配置中创建功能的符号链接。在写入gadget的UDC属性时使用此信息，这意味着将小工具绑定到UDC。 <code>drivers/usb/gadget/configfs.c</code>中的代码遍历所有配置，并在每个配置中迭代所有函数并绑定它们。这样整个gadget就绑定了。<br>3、<code>drivers/usb/gadget/configfs.c</code>包含的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy- gadget&#39;s config_group</span><br><span class="line">- gadget&#39;s default groups (configs, functions, strings)</span><br><span class="line">- associating functions with configurations (symlinks)</span><br></pre></td></tr></table></figure>



<p>4、每个USB功能自然都有自己想要配置的视图，因此特定功能的<code>config_groups</code>在功能实现文件<code>drivers/usb/gadget/f_*.c</code>中定义。<br>5、函数的代码是以它使用的方式编写的。</p>
<p><code>usb_get_function_instance()</code>，它又调用<code>request_module</code>。 因此，只要<code>insmod</code>工作，就会自动加载特定函数的模块。请注意，反之亦然，在禁用并拆除gadget后，模块仍会加载。</p>
]]></content>
      <categories>
        <category>Linux驱动</category>
        <category>USB</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>usb gadget configfs 验证</title>
    <url>/2020/09/06/usb-gadget-configfs-%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h3 id="内核打开对应的宏"><a href="#内核打开对应的宏" class="headerlink" title="内核打开对应的宏"></a>内核打开对应的宏</h3><p>1、必须打开<code>CONFIG_CONFIGFS_FS</code>和<code>CONFIG_USB_LIBCOMPOSITE</code>的宏，前者为用户空间提供访问配置内核驱动的configfs文件系统，后者提供usb gadget composite框架；<br>2、必须打开UDC(USB Device Controller)的配置，这个是配置硬件控制器。我这里使用<code>CONFIG_USB_CHIPIDEA</code>和<code>CONFIG_USB_CHIPIDEA_UDC</code>；<br>3、如果使用mass storage功能，需要打开<code>USB_CONFIGFS_MASS_STORAGE</code>和<code>USB_F_MASS_STORAGE</code>，对应于<code>usb_f_mass_storage.ko</code>驱动。</p>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ul>
<li>挂载configfs：<code>mount -t configfs none /config/</code>，在这之后，<code>/configfs/</code>目录下就会生成<code>usb_gadget/</code>目录；</li>
<li>创建gadget：<code>mkdir usb_gadget/g1</code>，创建<code>g1/</code>目录之后，该目录下会生成很多配置目录，这里的<code>g1</code>表示gadget 1，一个UDC对应一个gadget，如果你的SOC上有多个gadget，可以创建多个<code>gx</code>目录。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ll usb_gadget/g1/</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 UDC</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceClass</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceProtocol</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceSubClass</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bMaxPacketSize0</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bcdDevice</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bcdUSB</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 configs</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 functions</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 idProduct</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 idVendor</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 os_desc</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 strings</span><br></pre></td></tr></table></figure>

<ul>
<li>配置PID和VID</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 0x18d1 &gt; usb_gadget/g1/idVendor</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 0x4ee2 &gt; usb_gadget/g1/idProduct</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建并配置string字目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir usb_gadget/g1/strings/0x409</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;123456789&quot;</span> &gt; usb_gadget/g1/strings/0x409/serialnumber</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;xxx&quot;</span> &gt; usb_gadget/g1/strings/0x409/manufacturer</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;xxx_product&quot;</span> &gt; usb_gadget/g1/strings/0x409/product</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建configuration和字符串</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir usb_gadget/g1/configs/c.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir usb_gadget/g1/configs/c.1/strings/0x409</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;mass_storage&quot;</span> &gt; usb_gadget/g1/configs/c.1/strings/0x409/configuration</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建functions</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir usb_gadget/g1/<span class="built_in">functions</span>/mass_storage.0</span></span><br><span class="line">[  108.582976]  [1:          mkdir: 1976] Mass Storage Function, version: 2009/09/11</span><br><span class="line">[  108.592679]  [1:          mkdir: 1976] LUN: removable file: (no medium)</span><br></pre></td></tr></table></figure>

<p>这里的<code>mass_storage</code>的名字不能随便起，需要根据insmod的function驱动<code>usb_f_mass_storage.ko</code>来决定。否则会出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1|@android:/config # mkdir usb_gadget/g1/functions/msg.0</span><br><span class="line">mkdir: &#x27;usb_gadget/g1/functions/msg.0&#x27;: No such file or directory</span><br></pre></td></tr></table></figure>

<ul>
<li>将functions和configuration关联起来</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln -s usb_gadget/g1/<span class="built_in">functions</span>/mass_storage.0 usb_gadget/g1/configs/c.1</span></span><br></pre></td></tr></table></figure>
<p>上述配置之后，得到的结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127|@android:/config # find .</span><br><span class="line">.</span><br><span class="line">./usb_gadget</span><br><span class="line">./usb_gadget/g1</span><br><span class="line">./usb_gadget/g1/os_desc</span><br><span class="line">./usb_gadget/g1/os_desc/qw_sign</span><br><span class="line">./usb_gadget/g1/os_desc/b_vendor_code</span><br><span class="line">./usb_gadget/g1/os_desc/use</span><br><span class="line">./usb_gadget/g1/strings</span><br><span class="line">./usb_gadget/g1/strings/0x409</span><br><span class="line">./usb_gadget/g1/strings/0x409/serialnumber</span><br><span class="line">./usb_gadget/g1/strings/0x409/product</span><br><span class="line">./usb_gadget/g1/strings/0x409/manufacturer</span><br><span class="line">./usb_gadget/g1/configs</span><br><span class="line">./usb_gadget/g1/configs/c.1</span><br><span class="line">./usb_gadget/g1/configs/c.1/mass_storage.0</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings/0x409</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings/0x409/configuration</span><br><span class="line">./usb_gadget/g1/configs/c.1/bmAttributes</span><br><span class="line">./usb_gadget/g1/configs/c.1/MaxPower</span><br><span class="line">./usb_gadget/g1/functions</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/inquiry_string</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/nofua</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/cdrom</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/removable</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/ro</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/file</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/stall</span><br><span class="line">./usb_gadget/g1/UDC</span><br><span class="line">./usb_gadget/g1/bcdUSB</span><br><span class="line">./usb_gadget/g1/bcdDevice</span><br><span class="line">./usb_gadget/g1/idProduct</span><br><span class="line">./usb_gadget/g1/idVendor</span><br><span class="line">./usb_gadget/g1/bMaxPacketSize0</span><br><span class="line">./usb_gadget/g1/bDeviceProtocol</span><br><span class="line">./usb_gadget/g1/bDeviceSubClass</span><br><span class="line">./usb_gadget/g1/bDeviceClass</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前的UDC<br>可见当前的板子上有两个UDC，ci_hdrc.0和gadget-cdns3。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">130|@android:/config # ll /sys/class/udc/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 1999-11-30 00:09 ci_hdrc.0 -&gt; ../../devices/platform/5b0d0000.usb/ci_hdrc.0/udc/ci_hdrc.0</span><br><span class="line">lrwxrwxrwx 1 root root 0 1999-11-30 00:09 gadget-cdns3 -&gt; ../../devices/platform/5b110000.usb3/gadget-cdns3/udc/gadget-cdns3</span><br></pre></td></tr></table></figure>
<ul>
<li>绑定到UDC，使能gadget<br>将UDC切换至device模式，这里使用OTG ID pin来实现切换。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> ci_hdrc.0 &gt; usb_gadget/g1/UDC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /sys/class/gpio/gpio358/value</span></span><br></pre></td></tr></table></figure>

<h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><p>将配置好的开发板与ubuntu连接，从ubuntu上的串口可以看到如下信息，表示已将开发板配置成一个mass storage的设备了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[95705.390004] usb 1-11: USB disconnect, device number 28</span><br><span class="line">[95708.606717] usb 1-11: new high-speed USB device number 29 using xhci_hcd</span><br><span class="line">[95708.756934] usb 1-11: New USB device found, idVendor=18d1, idProduct=4ee2</span><br><span class="line">[95708.756941] usb 1-11: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[95708.756946] usb 1-11: Product: xxx_product</span><br><span class="line">[95708.756950] usb 1-11: Manufacturer: xxx</span><br><span class="line">[95708.756953] usb 1-11: SerialNumber: 123456789</span><br><span class="line">[95708.766595] usb-storage 1-11:1.0: USB Mass Storage device detected</span><br><span class="line">[95708.766798] scsi host6: usb-storage 1-11:1.0</span><br></pre></td></tr></table></figure>
<p>当然，上述的结果是ubuntu只识别到一个mass storage的设备，但是没有识别看分区表，所以没有看到相应的磁盘信息。想要看到磁盘信息，可以更进一步的设置mass_storage的<code>backen file</code>属性。</p>
<h3 id="定制分区"><a href="#定制分区" class="headerlink" title="定制分区"></a>定制分区</h3><p>在上面<code>创建functions</code>步骤之后，执行以下的命令，为mass storage创建2个分区，分区的backing file是开发板上的<code>/dev/block/mmcblk0p1</code>和<code>/dev/block/mmcblk0p2</code>，也就是开发板上的system分区和data分区。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir usb_gadget/g1/functions/mass_storage.0/partition.2</span><br><span class="line">mkdir usb_gadget/g1/functions/mass_storage.0/lun.1</span><br><span class="line">echo /dev/block/mmcblk0p1 &gt; usb_gadget/g1/functions/mass_storage.0/lun.0/file</span><br><span class="line">echo /dev/block/mmcblk0p2 &gt; usb_gadget/g1/functions/mass_storage.0/lun.1/file</span><br></pre></td></tr></table></figure>
<p>所有配置完成之后，插入到ubuntu后，可以看到能识别去新的分区信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">130 victor@victor-HP:/mnt⟫ sudo dmesg -c</span><br><span class="line">[40873.009026] EXT4-fs (sdc): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[41094.127318] usb 1-11: USB disconnect, device number 23</span><br><span class="line">[41094.128072] print_req_error: I/O error, dev sdc, sector 0</span><br><span class="line">[41094.131049] sd 6:0:0:0: [sdc] Synchronizing SCSI cache</span><br><span class="line">[41094.131118] sd 6:0:0:0: [sdc] Synchronize Cache(10) failed: Result: hostbyte=DID_NO_CONNECT driverbyte=DRIVER_OK</span><br><span class="line">[41466.480635] usb 1-11: new high-speed USB device number 24 using xhci_hcd</span><br><span class="line">[41466.630904] usb 1-11: New USB device found, idVendor=18d1, idProduct=4ee2</span><br><span class="line">[41466.630911] usb 1-11: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[41466.630915] usb 1-11: Product: xxx_product</span><br><span class="line">[41466.630919] usb 1-11: Manufacturer: xxx</span><br><span class="line">[41466.630923] usb 1-11: SerialNumber: 123456789</span><br><span class="line">[41466.640789] usb-storage 1-11:1.0: USB Mass Storage device detected</span><br><span class="line">[41466.641062] scsi host7: usb-storage 1-11:1.0</span><br><span class="line">[41467.645699] scsi 7:0:0:0: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.646291] scsi 7:0:0:1: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.646826] scsi 7:0:0:2: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.647387] sd 7:0:0:0: Attached scsi generic sg2 type 0</span><br><span class="line">[41467.647764] sd 7:0:0:1: Attached scsi generic sg3 type 0</span><br><span class="line">[41467.648144] sd 7:0:0:0: Power-on or device reset occurred</span><br><span class="line">[41467.648173] sd 7:0:0:2: Attached scsi generic sg4 type 0</span><br><span class="line">[41467.649026] sd 7:0:0:1: Power-on or device reset occurred</span><br><span class="line">[41467.649555] sd 7:0:0:2: Power-on or device reset occurred</span><br><span class="line">[41467.650006] sd 7:0:0:0: [sdd] 1048576 512-byte logical blocks: (537 MB/512 MiB)</span><br><span class="line">[41467.650766] sd 7:0:0:1: [sde] 524288 512-byte logical blocks: (268 MB/256 MiB)</span><br><span class="line">[41467.651726] sd 7:0:0:0: [sdd] Write Protect is off</span><br><span class="line">[41467.651731] sd 7:0:0:0: [sdd] Mode Sense: 0f 00 00 00</span><br><span class="line">[41467.651929] sd 7:0:0:1: [sde] Write Protect is off</span><br><span class="line">[41467.651933] sd 7:0:0:1: [sde] Mode Sense: 0f 00 00 00</span><br><span class="line">[41467.652327] sd 7:0:0:2: [sdf] Attached SCSI removable disk</span><br><span class="line">[41467.652581] sd 7:0:0:0: [sdd] Write cache: enabled, read cache: enabled, doesn&#x27;t support DPO or FUA</span><br><span class="line">[41467.652837] sd 7:0:0:1: [sde] Write cache: enabled, read cache: enabled, doesn&#x27;t support DPO or FUA</span><br><span class="line">[41467.673305] sd 7:0:0:1: [sde] Attached SCSI removable disk</span><br><span class="line">[41467.674915] sd 7:0:0:0: [sdd] Attached SCSI removable disk</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>上述的配置过程太繁琐了，在Android上，基于configfs有专门的<code>init.rc</code>在启动过程中去配置对应的<code>configuration</code>和<code>function</code>，比如说<code>init.usb.rc</code>，里面包含了一系列gadget的配置方法。在后面的文章中，将详细讲述每条命令背后的实现原理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">on boot</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;strings&#x2F;0x409&#x2F;serialnumber $&#123;ro.serialno&#125;</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;strings&#x2F;0x409&#x2F;manufacturer $&#123;ro.product.manufacturer&#125;</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;strings&#x2F;0x409&#x2F;product $&#123;ro.product.model&#125;</span><br><span class="line"></span><br><span class="line">    setprop sys.usb.configfs 1</span><br><span class="line"></span><br><span class="line">    # OS DESCRIPTORS</span><br><span class="line">    #&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    # OS STRING</span><br><span class="line">    #----------</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;b_vendor_code 1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;qw_sign &quot;MSFT100&quot;</span><br><span class="line">    # use os desc or not is up to each usb functions respectively</span><br><span class="line">    # write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;use 1</span><br><span class="line"></span><br><span class="line">    # MAKE b.1 THE ONE ASSOCIATED WITH OS DESCRIPTORS</span><br><span class="line">    #------------------------------------------------</span><br><span class="line">    symlink &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;configs&#x2F;b.1 &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;b1</span><br><span class="line"></span><br><span class="line">    # ci_hdrc.0 is the fixed UDC name</span><br><span class="line">    setprop sys.usb.controller ci_hdrc.0</span><br><span class="line"></span><br><span class="line">on fs</span><br><span class="line">    mkdir &#x2F;dev&#x2F;usb-ffs 0770 shell shell</span><br><span class="line">    mkdir &#x2F;dev&#x2F;usb-ffs&#x2F;adb 0770 shell shell</span><br><span class="line">    # mount the configfs on &#x2F;config</span><br><span class="line">    mount configfs none &#x2F;config mode&#x3D;0755</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;configs&#x2F;b.1</span><br><span class="line">    # mkdir for functions needed</span><br><span class="line">    # this will call each gadget&#39;s alloc_inst()</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;ffs.adb</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;mtp.gs0</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;ptp.gs1</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;accessory.gs2</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;audio_source.gs3</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;rndis.gs4</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;midi.gs5</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;strings&#x2F;0x409</span><br><span class="line">    mkdir &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;configs&#x2F;b.1&#x2F;strings&#x2F;0x409</span><br><span class="line">    # The mount of functionfs for adb must be put AFTER the mkdir for functions in configfs</span><br><span class="line"></span><br><span class="line">on property:sys.usb.config&#x3D;none &amp;&amp; property:sys.usb.configfs&#x3D;1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;use 0</span><br><span class="line"></span><br><span class="line">on property:sys.usb.ffs.ready&#x3D;1 &amp;&amp; property:sys.usb.config&#x3D;adb &amp;&amp; property:sys.usb.configfs&#x3D;1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;idProduct 0x4ee7</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;idVendor 0x18d1</span><br><span class="line"></span><br><span class="line">on property:sys.usb.config&#x3D;mtp &amp;&amp; property:sys.usb.configfs&#x3D;1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;functions&#x2F;mtp.gs0&#x2F;os_desc&#x2F;interface.MTP&#x2F;compatible_id &quot;MTP&quot;</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;os_desc&#x2F;use 1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;idProduct 0x4ee1</span><br><span class="line">    write &#x2F;config&#x2F;usb_gadget&#x2F;g1&#x2F;idVendor 0x18d1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux驱动</category>
        <category>USB</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
